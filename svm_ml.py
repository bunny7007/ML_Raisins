# -*- coding: utf-8 -*-
"""MLprojecttest12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DQQmKUy5v2O_N_G8sTSvGH2StXNIGnO
"""

from google.colab import files
uploaded = files.upload()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('winequalityN.csv')
print(df.head())

from google.colab import drive
drive.mount('/content/drive')

df.info()

df.describe().T

df.isnull().sum()

for col in df.columns:
 if df[col].isnull().sum() > 0:
	 df[col] = df[col].fillna(df[col].mean())

df.hist(bins=20, figsize=(10, 10))
plt.show()

plt.bar(df['quality'], df['alcohol'])
plt.xlabel('quality')
plt.ylabel('alcohol')
plt.show()

plt.figure(figsize=(12, 12))
sb.heatmap(df.corr() > 0.7, annot=True, cbar=False)
plt.show()

df = df.drop('total sulfur dioxide', axis=1)

df['best quality'] = [1 if x > 5 else 0 for x in df.quality]

df.replace({'white': 1, 'red': 0}, inplace=True)

features = df.drop(['quality', 'best quality'], axis=1)
target = df['best quality']

xtrain, xtest, ytrain, ytest = train_test_split(
	features, target, test_size=0.2, random_state=40)

xtrain.shape, xtest.shape

norm = MinMaxScaler()
xtrain = norm.fit_transform(xtrain)
xtest = norm.transform(xtest)

models = [LogisticRegression(), XGBClassifier(), SVC(kernel='rbf')]

for i in range(3):
    models[i].fit(xtrain, ytrain)

    print(f'{models[i]} : ') in
    print('Training Accuracy : ', metrics.roc_auc_score(ytrain, models[i].predict(xtrain)))
    print('Validation Accuracy : ', metrics.roc_auc_score(
        ytest, models[i].predict(xtest)))
    print()

metrics.plot_confusion_matrix(models[1], xtest, ytest)
plt.show()

plt.figure(figsize=[19,10],facecolor='blue')
sb.heatmap(df.corr(),annot=True)

print(metrics.classification_report(ytest,models[1].predict(xtest)))